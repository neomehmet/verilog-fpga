//==================================//
// this part of finite state machine //
//===================================//


module example1( input clk, buton, output reg y);
	
	always @( * ) // asterix means sequential circuits
	begin
		case(data);
		0 : 
	
endmodule

module comb( input inv, input [3:0] data, output reg [3:0] result );

	always@(inv , data) // trigger with inv or data doesnt matter 
	if( inv ) result <= ~data;
	else result <= data;

endmodule

 //* sensitive parts creates by combinational circuits always assignmens must = blocking ,, step by step
 // posedge clk craetes by register, and always assignments must<= non blocking parallel processing
 
 


//===================//
// concatanation {3'b11, 1'b0} = 0110 //
// replication {5{1'b1}}  //
//================//

module dfifo(input clk, input [3:0] d, output reg [3:0] q );

	always @ ( posedge clk )
		begin
		q <= d; // non blocking  assignment <= must be in the always block cannot use assign 
		end
		
endmodule

//=================//
// asyncron reset not depend on  clk //
//=========================//
module dfifo_asyncron( input clk, reset, input [3:0] d, output reg [3:0] q );

	always @ ( posedge clk, negedge reset)
		begin
			if ( reset == 0) 
				q <= 0;
			else 	q <= d;
		end

endmodule


//=================//
// syncron reset not depend on  clk //
//=========================//
module dfifo_syncron( input clk, reset, input [3:0] d, output reg [3:0] q );

	always @ ( posedge clk)
		begin
			if ( reset == 0 ) 
				q <= 0;
			else 	q <= d;
		end

endmodule


//====================//
// reg is not equal register //
// mux can be create combinational or always block //
//===============================//

//=================//
// behavioural //
//====================//
module mux2x1( input lsb, msb, sel output y);
	assign y = sel ? msb , lsb;  
endmodule
