
module aluu	( input [3:0] a,b,  input [1:0] opcode, output [3:0] out, output carry );

	wire [3:0] w_xor, w_add_sub, w_compare;
	wire w_opcode;
	
	assign W_opcode = opcode[0] | opcode[1] ;
	
//module full_add_sub_4_bits(input [3:0] a,b, input cin, output [3:0] out, output carry );	
	full_add_sub_4_bits module1(.a(a), .b(b), .cin(W_opcode), .out(w_add_sub), .carry(carry) );
	
//module xor4x4 ( input [3:0] a,b, output [3:0] y );	
	xor4x4 module2(.y(w_xor), .a(a), .b(b) );
	
//module compare( input [3:0] a,b, output [3:0]  y);	
	compare module3(.a(a), .b(b), .y(w_compare) );

//module mux4x2(input[3:0] a3,a2,a1,a0, input sel0, sel1, output[3:0] y);
	mux4x2 module4(.a0(w_add_sub), .a1(w_add_sub), .a2(w_compare), .a3(w_xor), .y(out),  .sel0(opcode[0]), .sel1(opcode[1]) );
	
endmodule

//==============//
// 4x4 xor //
//==============//

module xor4x4 ( input [3:0] a,b, output [3:0] y );

	xor g1(y[0],	a[0], b[0] );
	xor g2(y[1],	a[1], b[1] );
	xor g3(y[2],	a[2], b[2] );
	xor g4(y[3],	a[3], b[3] );

endmodule 

//===============================================//
// a < b test if statement true x = 1, false x=0 //
//===============================================//

module compare( input [3:0] a,b,  output [3:0] y);
	
	wire [3:0] w_sum;
	wire w_carry;
	wire w;
	assign w = 1;
//module full_add_sub_4_bits(input [3:0] a,b, input cin, output [3:0] out, output carry );
	full_add_sub_4_bits module1(.a(a), .b(b), .cin(w), .out(y), .carry(w_carry) );
		
	
	
endmodule

//=============================//
// mux design implemantation
//lsb and msb are inputs
// sel is select bit
//=============================//

module mux2x1( input [3:0]a1,a0, input sel, output[3:0] y);
	wire [3:0] w1,w2,w3, w_sel;
	
	not (w1[0], sel);
	not (w1[1], sel);
	not (w1[2], sel);
	not (w1[3], sel);
	
	and (w2[0],	a0[0], w1[0]);
	and (w2[1],	a0[1], w1[1]);
	and (w2[2],	a0[2], w1[2]);
	and (w2[3],	a0[3], w1[3]);
	
	and (w3[0],	a1[0], sel);
	and (w3[1],	a1[1], sel);
	and (w3[2],	a1[2], sel);
	and (w3[3],	a1[3], sel);
	
	or (y[0],	w2[0], w3[0]);
	or (y[1],	w2[1], w3[1]);
	or (y[2],	w2[2], w3[2]);
	or (y[3],	w2[3], w3[3]);

endmodule

module mux4x2(input[3:0] a3,a2,a1,a0, input sel0, sel1, output[3:0] y);

	wire [3:0] w1,w2;
	
//module mux2x1( input [3:0]a1,a0, input sel, output[3:0] y);	

	mux2x1 m1(.y(w1), .a1(a1), .a0(a0), .sel(sel0) );
	mux2x1 m2(.y(w2), .a1(a3), .a0(a2), .sel(sel0) );
	
	mux2x1 m3(.y(y), .a1(w2), .a0(w1), .sel(sel1) );
	
endmodule

module half_adder( input a,b, output sum, carry);

	xor(sum, a,b);
	and(carry, a,b);
	
endmodule

module full_adder( input a,b,cin, output carry, sum);

	wire w1,w2,w3;
	
	half_adder m1(.a(a), .b(b), .sum(w1), .carry(w2) );
	half_adder m2(.a(w1), .b(cin), .sum(sum), .carry(w3) );
	
	or m3(carry, w2,w3);
	
endmodule

module full_adder_4_bits( input [3:0] a,b, input cin, output [3:0] sum, output carry );

	wire w1,w2,w3;
	
	full_adder m1(.a(a[0]), .b(b[0]), .cin(cin), .sum(sum[0]),	.carry(w1)	  );
	full_adder m2(.a(a[1]), .b(b[1]), .cin(w1), 	.sum(sum[1]),	.carry(w2) 	  );
	full_adder m3(.a(a[2]), .b(b[2]), .cin(w2), 	.sum(sum[2]),	.carry(w3) 	  );
	full_adder m4(.a(a[3]), .b(b[3]), .cin(w3),	.sum(sum[3]),	.carry(carry) );

endmodule

module full_add_sub_4_bits(input [3:0] a,b, input cin, output [3:0] out, output carry );
	wire [3:0] wxor, wcarry;
	
	xor gate1(wxor[0], cin, b[0] );
	xor gate2(wxor[1], cin, b[1] );
	xor gate3(wxor[2], cin, b[2] );
	xor gate4(wxor[3], cin, b[3] );
	
	full_adder_4_bits m1(.a(a), .b(wxor), .cin(cin), .sum(out), .carry(carry) );
	
endmodule
	

